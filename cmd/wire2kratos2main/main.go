package main

import (
	"flag"
	"os"
	"path/filepath"
	"strings"

	"github.com/orzkratos/wire2kratos/internal/utils"
	"github.com/yyle88/done"
	"github.com/yyle88/erero"
	"github.com/yyle88/must"
	"github.com/yyle88/must/slice_must"
	"github.com/yyle88/osexistpath/osmustexist"
	"github.com/yyle88/runpath"
	"github.com/yyle88/zaplog"
	"go.uber.org/zap"
)

func main() {
	zaplog.LOG.Info("main", zap.String("path", runpath.PARENT.Path()))

	var path string
	var name string
	var framework string
	var debug bool
	flag.StringVar(&path, "path", "", "absolute_path. example: /Users/admin/xx/xx/xx/project/cmd/project/wire_gen.go")
	flag.StringVar(&name, "name", "", "relative_path. example: cmd/project/wire_gen.go")
	flag.StringVar(&framework, "framework", "", "framework name. example: kratos")
	flag.BoolVar(&debug, "debug", false, "debug mode")
	flag.Parse()

	zaplog.LOG.Info("args", zap.String("path", path), zap.String("name", name), zap.String("framework", framework), zap.Bool("debug", debug))
	if path == "" {
		switch {
		case name != "":
			path = filepath.Join(utils.PWD(), name)
		case framework != "":
			switch framework {
			case "kratos":
				path = deriveKratosProjectWireGenPath()
			default:
				panic(erero.New("wrong param"))
			}
		default:
			panic(erero.New("wrong param"))
		}
	}
	zaplog.LOG.Info("derive-wire_gen-path", zap.String("path", path))

	osmustexist.MustFile(must.Nice(path))
	content := string(done.VAE(os.ReadFile(path)).Nice())
	if debug {
		zaplog.SUG.Info(content)
	}

	sxLines := strings.Split(content, "\n")
	slice_must.Nice(sxLines)

	const prefixComment = "// Code generated by Wire. DO NOT EDIT."
	must.Equals(sxLines[0], prefixComment)

	const index = 2 //想要替换的就在这行
	must.FALSE(len(sxLines) <= index)

	const matchOriginLine = "//go:generate go run -mod=mod github.com/google/wire/cmd/wire"
	const changeToNewLine = "//go:generate go run github.com/google/wire/cmd/wire"
	if sxLines[index] != changeToNewLine {
		must.Equals(sxLines[index], matchOriginLine)

		sxLines[index] = changeToNewLine

		newCode := strings.Join(sxLines, "\n")
		if debug {
			zaplog.SUG.Info(newCode)
		}
		done.Done(os.WriteFile(path, []byte(newCode), 0644))
	}
	zaplog.LOG.Info("success")
}

func deriveKratosProjectWireGenPath() string {
	root := utils.PWD()
	must.Nice(root)
	osmustexist.MustRoot(root)

	projectName := filepath.Base(root)
	must.Nice(projectName)

	path := filepath.Join(root, "cmd", projectName, "wire_gen.go")
	osmustexist.MustFile(path)
	return path
}
